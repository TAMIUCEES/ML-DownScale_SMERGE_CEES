# -*- coding: utf-8 -*-
"""netCDF_Layer_Extractor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10eTA2rguIyvI_BoBPjXUCY_4L2uhgbsx

# Introduction

The **netCDF_Layer_extractor** script uses the *find_files* function to locate files and create new file paths to modify file names for each path. This capability enables users to generate new files and resample data.

---

The following libraries are imported to allow the code to run:

- **os** - The directory service provides the ability to create and remove directory folders, gather data, change and find the current directory, and provide a means for users and the operating system to interact with each other.
- **arcpy** - Arcpy enables efficient and effective geographic data analysis, data management, map automation, and data conversion. With ArcPy, users can leverage the capabilities of Python to effortlessly handle complex geospatial tasks.
- **fnmatch** - Compares filenames against a pattern and returns True or False according to the name.
> For more information visit: https://docs.python.org/3/library/fnmatch.html
"""

import os
import arcpy
import fnmatch

"""*find_files*

---

- The function is designed to locate files within a designated directory and its subdirectories that conform to a specified file extension. The function parameters are the following: **directory** is used to search for files and **extension** is the file extension to match (i.e. 'txt' or 'csv').
"""

def find_files(directory, extension):
    # Empty lists are created
    matches = []
    file_n = []
    # Sorts through all files
    for root, dirnames, filenames in os.walk(directory):
        for filename in fnmatch.filter(filenames, f'*.{extension}'):
            matches.append(os.path.join(root, filename))
            file_n.append(filename)
    return matches, file_n

"""- The user will be asked to state the input directory and the output directory.

  - An example for the input directory would be the following:
> *Enter the parent input directory:* **E:\share\Copernicus_NDVI\M0216794\etCDF**

  - An example for the output directory would be the following:
> *Enter the output directory:* **E:\share\Copernicus_NDVI\M0216794_Layers**
"""

# Set the input directory
input_dir = input("Enter the parent input directory: ")

# Set the output directory
output_dir = input("Enter the parent output directory: ")

"""- The input extension of the file is requested, as well as the variable that will be used for the extraction.

  - An example of the input extension would be the following:
> *Please enter the input extension of the file:* **nc**

  - An example of the variable which will be used for the extraction would be the following:
>*Please enter the variable for the extension:* **ndvi**
"""

# File Extension
file_ex = input("Please enter the input extension of the file: ")

# File Extraction
var = input("Please enter the variable for the extraction: ")

"""- The output directory and '*netCDF_Layer_extractor.gdb*' are used to create the file **geodatabase_path**. After file creation, its existence is checked. If the file exists, it is displayed to the user. In the absence of the file, a new geodatabase file is created."""

# geodatabase_path is created and checks if file was created
geodatabase_path = os.path.join(output_dir, 'netCDF_Layer_extractor.gdb')
if os.path.exists(geodatabase_path):
    print(geodatabase_path)
else:
    arcpy.CreateFileGDB_management(output_dir, 'netCDF_Layer_extractor')

"""- The code generates a list of files based on their directory and file extension. For each file, a modified file name replaces a portion of the original one. Finally, a multidimensional raster layer is generated using the original file, followed by data resampling."""

files, file_ns= find_files(input_dir, file_ex)
XDimension = "lon"
YDimension = "lat"
i = 0
for file_path in files:
    if True:
        f_name = os.path.join(output_dir,file_ns[i].replace('.nc', '.crf').replace('0000', ''))
        print(f_name)
        arcpy.md.MakeMultidimensionalRasterLayer(file_path,f_name,var)
        arcpy.management.Resample(f_name, f_name)
    i = i + 1