# -*- coding: utf-8 -*-
"""dataset_breakdown.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1IOq4XvH2npvqQdk4rxQH8WGJWFyxhi

# Introduction
The ***dataset_breakdown*** program gathers data from the user input in the form of a CSV file then breaks down the data in the file. The user can then select whether the file will be broken down as a directory or individually. If the user chooses to break down all CSV files, they will need to input the resolution ID. Organizing data in a file by breaking it down allows the user to sort the values in the file.

---
The following libraries are imported to allow the code to be run:

* **os** - The directory service provides the ability to create and remove directory folders, gather data, change and find the current directory, and provide a means for users and the operating system to interact with each other.
* **datetime** - Manipulates the data between dates and time.
* **string** - Allows strings or data to be split when needed.
* **warnings** - Informs the user of the state of the code or where an error has occurred.
* **sys** - Provides a way to manipulate the runtime of the program by using certain parameters and functions.
* **Pandas** - Is a tool for modeling, analyzing, and manipulating data sets.
> For more information visit: https://www.geeksforgeeks.org/introduction-to-pandas-in-python/#
* **NumPy** - Supports analysis and can perform operations on a large set of data.
> For more information visit: https://numpy.org/doc/stable/user/whatisnumpy.html
* **re** - regular expression (or **re**) specifies a set of strings, where a particular string will match the given regular expression.
> For more information visit: https://docs.python.org/3/library/re.html
"""

import os
import datetime
import string
import warnings
import sys
import pandas as pd
import numpy as np
import re

"""- The function **breakdown** use the three arguments: *output_d*, *input_d*, and *d_name*.
  - The *output_d* argument is the path to the output directory where the files that have been broken down will be saved.
  - The *input_d* argument is the path to the input directory where the original CSV file is located.
  - The *d_name* argument is the name of the original CSV file.

- First, the function will read the CSV file.
Then, for every column, the function will check if *'MEAN'* is found within the column name. If *'MEAN'* is not found within the column name, the function will create a new DataFrame, **f_data**, that contains only the *'PageName'* and *'MEAN'* columns. Then, the function will change the column names of **f_data** to *'PageName'* and *'MEAN'*, respectively. Moreover, **f_data** will be saved to a CSV file in the output directory.
"""

def breakdown(output_d,input_d,d_name):
  data = pd.read_csv(os.path.join(input_d,d_name))
  col = data.columns
  home = output_d
  for c in col:
    f_data = data[['PageName',c]]
    f_data.columns = ['PageName','MEAN']
    if 'MEAN' in c:
      f_data.to_csv(os.path.join(home,c.replace('MEAN_','')+'.csv'))

# Set the input directory
input_d = input("Enter the input directory: ")

# Set the output directory
output_d = input("Enter the output directory: ")

"""- There are two ways to break down a CSV file: obtain all CSV files in a directory or break down the CSV file individually.

- The user will need to input '*Y*' for all files in the directory or '*N*' for individual files.  
"""

# How file should be broken down
auto = input("Do you wish to breakdown all CSVs in a directory(type: Y) or individually(type: N): ")

# Use the correct inputs
while auto != 'Y' and auto != 'N':
  print("Input invalid. \n")
  auto = input("How do you want to breakdown CSVs: ")

"""- If the user inputs '*N* ', the user will be prompted to enter the name of the dataset. The program will then check if the files exists. If the file does not exist, the user will be prompted to enter a valid file name until they do. Once the file has been correctly entered, the information will be passed to the **breakdown** function.

- If the user inputs '*Y* ', they must enter a resolution ID. When the input directory ends with '*.csv*' and the resolution ID is found in the file name, the file name is printed and the **breakdown** function is used.
"""

if auto == 'N':
  # Set data product name
  d_name = input("Enter the name of the dataset (Include file extension): ")

  # Re-input information of the file if entered incorrectly or does not exist until entered correctly
  while not os.path.exists(os.path.join(input_d,d_name)):
    print('The dataset was not found, should be in the same directory as the .py script')
    d_name = input("Enter the name of the dataset (Include file extension): ")
    input_d = input("Enter the input directory: ")
    breakdown(output_d,input_d,d_name)

if auto == 'Y':
  reso = input('What is the resolution ID, if none leave blank and press enter: ')
  for f in os.listdir(input_d):
    if f.endswith('.csv') and reso in f:
      print(f)
      breakdown(output_d,input_d,f)